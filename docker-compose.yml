services:
  redis:
    container_name: redis
    image: redis:${REDIS_VERSION}
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli",  "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
#    ports:
#      - ${REDIS_PORT}:${REDIS_PORT}

  postgres:
    container_name: postgres
    image: postgres:${POSTGRES_VERSION}
    restart: always
    environment:
      POSTGRES_USER: ${DB_POSTGRES_USER}
      POSTGRES_PASSWORD: ${DB_POSTGRES_PASSWORD}
      POSTGRES_DB: ${DB_POSTGRES_NAME}
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${DB_POSTGRES_USER}'"]
      interval: 1s
      timeout: 5s
      retries: 10

  tgbot:
    container_name: tgbot
    restart: always
    build:
      context: .
      dockerfile: dockerfiles/tgbot/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/server/logs

  alembic_revisions:
    container_name: alembic_revisions
    restart: no
    build:
      context: .
      dockerfile: dockerfiles/alembic_revisions/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./source/database/migrations:/server/source/database/migrations

  alembic_upgrade:
    container_name: alembic_upgrade
    restart: no
    build:
      context: .
      dockerfile: dockerfiles/alembic_upgrade/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  pg_data:
